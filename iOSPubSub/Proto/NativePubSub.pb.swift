// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: NativePubSub.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: String = String()

  public var container: Container {
    get {return _container ?? Container()}
    set {_container = newValue}
  }
  /// Returns true if `container` has been explicitly set.
  public var hasContainer: Bool {return self._container != nil}
  /// Clears the value of `container`. Subsequent reads from it will return its default value.
  public mutating func clearContainer() {self._container = nil}

  public var envelope: Envelope {
    get {return _envelope ?? Envelope()}
    set {_envelope = newValue}
  }
  /// Returns true if `envelope` has been explicitly set.
  public var hasEnvelope: Bool {return self._envelope != nil}
  /// Clears the value of `envelope`. Subsequent reads from it will return its default value.
  public mutating func clearEnvelope() {self._envelope = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _container: Container? = nil
  fileprivate var _envelope: Envelope? = nil
}

public struct Container {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var booleans: Dictionary<String,Bool> = [:]

  public var integers: Dictionary<String,Int32> = [:]

  public var floats: Dictionary<String,Float> = [:]

  public var strings: Dictionary<String,String> = [:]

  public var bytes: Dictionary<String,Data> = [:]

  public var containers: Dictionary<String,Container> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Envelope {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var senderID: Int32 = 0

  public var receiverID: Int32 {
    get {return _receiverID ?? 0}
    set {_receiverID = newValue}
  }
  /// Returns true if `receiverID` has been explicitly set.
  public var hasReceiverID: Bool {return self._receiverID != nil}
  /// Clears the value of `receiverID`. Subsequent reads from it will return its default value.
  public mutating func clearReceiverID() {self._receiverID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _receiverID: Int32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "container"),
    3: .same(proto: "envelope"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularMessageField(value: &self._container)
      case 3: try decoder.decodeSingularMessageField(value: &self._envelope)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if let v = self._container {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._envelope {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message, rhs: Message) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs._container != rhs._container {return false}
    if lhs._envelope != rhs._envelope {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Container: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Container"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "booleans"),
    2: .same(proto: "integers"),
    3: .same(proto: "floats"),
    4: .same(proto: "strings"),
    5: .same(proto: "bytes"),
    6: .same(proto: "containers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: &self.booleans)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &self.integers)
      case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFloat>.self, value: &self.floats)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.strings)
      case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: &self.bytes)
      case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Container>.self, value: &self.containers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.booleans.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: self.booleans, fieldNumber: 1)
    }
    if !self.integers.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: self.integers, fieldNumber: 2)
    }
    if !self.floats.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFloat>.self, value: self.floats, fieldNumber: 3)
    }
    if !self.strings.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.strings, fieldNumber: 4)
    }
    if !self.bytes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: self.bytes, fieldNumber: 5)
    }
    if !self.containers.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Container>.self, value: self.containers, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Container, rhs: Container) -> Bool {
    if lhs.booleans != rhs.booleans {return false}
    if lhs.integers != rhs.integers {return false}
    if lhs.floats != rhs.floats {return false}
    if lhs.strings != rhs.strings {return false}
    if lhs.bytes != rhs.bytes {return false}
    if lhs.containers != rhs.containers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Envelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Envelope"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "senderID"),
    2: .same(proto: "receiverID"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.senderID)
      case 2: try decoder.decodeSingularInt32Field(value: &self._receiverID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.senderID != 0 {
      try visitor.visitSingularInt32Field(value: self.senderID, fieldNumber: 1)
    }
    if let v = self._receiverID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Envelope, rhs: Envelope) -> Bool {
    if lhs.senderID != rhs.senderID {return false}
    if lhs._receiverID != rhs._receiverID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
